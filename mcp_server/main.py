# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:20:32+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Path, Query
from pydantic import conint, constr
from starlette.requests import Request

from models import (
    AccountUsageRecordEnumGranularity,
    CommandEnumDirection,
    CommandEnumStatus,
    CommandEnumTransport,
    SimEnumStatus,
    UsageRecordEnumGranularity,
    V1CommandsGetResponse,
    V1RatePlansGetResponse,
    V1SimsGetResponse,
    V1SimsSimSidDataSessionsGetResponse,
    V1SimsSimSidUsageRecordsGetResponse,
    V1UsageRecordsGetResponse,
    WirelessV1Command,
    WirelessV1RatePlan,
    WirelessV1Sim,
)

app = MCPProxy(
    contact={
        'email': 'support@twilio.com',
        'name': 'Twilio Support',
        'url': 'https://support.twilio.com',
    },
    description='This is the public Twilio REST API.',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://www.twilio.com/legal/tos',
    title='Twilio - Wireless',
    version='1.42.0',
    servers=[{'url': 'https://wireless.twilio.com'}],
)


@app.get(
    '/v1/Commands',
    description=""" Retrieve a list of Commands from your account. """,
    tags=['command_management', 'sim_card_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_command(
    sim: Optional[str] = Query(None, alias='Sim'),
    status: Optional[CommandEnumStatus] = Query(None, alias='Status'),
    direction: Optional[CommandEnumDirection] = Query(None, alias='Direction'),
    transport: Optional[CommandEnumTransport] = Query(None, alias='Transport'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Commands',
    description=""" Send a Command to a Sim. """,
    tags=['command_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_command(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Commands/{Sid}',
    description=""" Delete a Command instance from your account. """,
    tags=['sim_card_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_command(
    sid: constr(pattern=r'^DC[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Commands/{Sid}',
    description=""" Fetch a Command instance from your account. """,
    tags=['sim_card_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_command(
    sid: constr(pattern=r'^DC[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/RatePlans',
    tags=['usage_record_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_rate_plan(
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/RatePlans',
    tags=['command_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_rate_plan(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/RatePlans/{Sid}',
    tags=['sim_card_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_rate_plan(sid: str = Path(..., alias='Sid')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/RatePlans/{Sid}',
    tags=['sim_card_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_rate_plan(sid: str = Path(..., alias='Sid')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/RatePlans/{Sid}',
    tags=['sim_card_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_rate_plan(sid: str = Path(..., alias='Sid'), request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Sims',
    description=""" Retrieve a list of Sim resources on your Account. """,
    tags=['sim_card_operations', 'rate_plan_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_sim(
    status: Optional[SimEnumStatus] = Query(None, alias='Status'),
    iccid: Optional[str] = Query(None, alias='Iccid'),
    rate_plan: Optional[str] = Query(None, alias='RatePlan'),
    e_id: Optional[str] = Query(None, alias='EId'),
    sim_registration_code: Optional[str] = Query(None, alias='SimRegistrationCode'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Sims/{Sid}',
    description=""" Delete a Sim resource on your Account. """,
    tags=['sim_card_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_sim(sid: str = Path(..., alias='Sid')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Sims/{Sid}',
    description=""" Fetch a Sim resource on your Account. """,
    tags=['sim_card_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_sim(sid: str = Path(..., alias='Sid')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Sims/{Sid}',
    description=""" Updates the given properties of a Sim resource on your Account. """,
    tags=['sim_card_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_sim(sid: str = Path(..., alias='Sid'), request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Sims/{SimSid}/DataSessions',
    tags=['sim_card_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_data_session(
    sim_sid: str = Path(..., alias='SimSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Sims/{SimSid}/UsageRecords',
    tags=['usage_record_operations', 'sim_card_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_usage_record(
    sim_sid: str = Path(..., alias='SimSid'),
    end: Optional[datetime] = Query(None, alias='End'),
    start: Optional[datetime] = Query(None, alias='Start'),
    granularity: Optional[UsageRecordEnumGranularity] = Query(
        None, alias='Granularity'
    ),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/UsageRecords',
    tags=['usage_record_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_account_usage_record(
    end: Optional[datetime] = Query(None, alias='End'),
    start: Optional[datetime] = Query(None, alias='Start'),
    granularity: Optional[AccountUsageRecordEnumGranularity] = Query(
        None, alias='Granularity'
    ),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
